/**
 * CONFIGURACI√ìN DE RUTAS DEL M√ìDULO AUTH
 * ======================================
 * 
 * Este archivo define todas las rutas HTTP disponibles para el m√≥dulo de autenticaci√≥n.
 * Las rutas se configuran usando Express Router y se conectan con el controlador.
 * 
 * URL base: /api/auth
 * 
 * Flujos de usuario implementados:
 * 
 * üÜï REGISTRO COMPLETO:
 * 1. POST /register ‚Üí Usuario se registra
 * 2. POST /resend-verification ‚Üí Reenviar email (opcional)
 * 3. POST /verify-email ‚Üí Verificar cuenta con token
 * 
 * üîê AUTENTICACI√ìN COMPLETA:
 * 1. POST /login ‚Üí Iniciar sesi√≥n (obtiene access + refresh token)
 * 2. GET /me ‚Üí Verificar sesi√≥n activa
 * 3. POST /refresh ‚Üí Renovar access token cuando expire
 * 4. POST /logout ‚Üí Cerrar sesi√≥n (revoca tokens)
 * 
 * üë§ GESTI√ìN DE PERFIL:
 * 1. GET /me ‚Üí Obtener datos del usuario
 * 2. PATCH /me ‚Üí Actualizar perfil
 * 3. PATCH /me/password ‚Üí Cambiar contrase√±a
 * 4. POST /me/push-token ‚Üí Registrar notificaciones
 * 
 * üîÑ RECUPERACI√ìN DE CONTRASE√ëA:
 * 1. POST /forgot-password ‚Üí Solicitar reset (env√≠a email)
 * 2. POST /reset-password ‚Üí Establecer nueva contrase√±a
 * 
 * Uso desde el frontend:
 * ```typescript
 * // Ejemplo de registro completo
 * const registerUser = async (userData) => {
 *   // 1. Registrar
 *   const response = await fetch('/api/auth/register', {
 *     method: 'POST',
 *     headers: { 'Content-Type': 'application/json' },
 *     body: JSON.stringify(userData)
 *   });
 *   
 *   // 2. Si es exitoso, obtener tokens
 *   const result = await response.json();
 *   if (result.ok) {
 *     localStorage.setItem('access_token', result.data.access_token);
 *     localStorage.setItem('refresh_token', result.data.refresh_token);
 *   }
 * };
 * 
 * // Ejemplo de login
 * const loginUser = async (email, password) => {
 *   const response = await fetch('/api/auth/login', {
 *     method: 'POST',
 *     headers: { 'Content-Type': 'application/json' },
 *     body: JSON.stringify({ email, password })
 *   });
 *   
 *   const result = await response.json();
 *   if (result.ok) {
 *     localStorage.setItem('access_token', result.data.access_token);
 *     return result.data.user;
 *   }
 * };
 * 
 * // Ejemplo de obtener perfil
 * const getProfile = async () => {
 *   const token = localStorage.getItem('access_token');
 *   const response = await fetch('/api/auth/me', {
 *     headers: { 'Authorization': `Bearer ${token}` }
 *   });
 *   
 *   const result = await response.json();
 *   return result.ok ? result.data : null;
 * };
 * ```
 */

import { Router } from 'express';
import { AuthController } from '../interfaces/controllers/authController';

// Crear router de Express y instancia del controlador
const router = Router();
const controller = new AuthController();

/**
 * RUTAS DE REGISTRO Y AUTENTICACI√ìN
 * =================================
 */

// POST /api/auth/register - Registrar nuevo usuario
// Body: { nombre?, apellido?, email, password, telefono? }
// Response: TokenResponse con access_token y user data
router.post('/register', controller.register);

// POST /api/auth/login - Iniciar sesi√≥n
// Body: { email, password }
// Response: TokenResponse con access_token y user data
router.post('/login', controller.login);

// POST /api/auth/logout - Cerrar sesi√≥n
// Body: { refresh_token? }
// Response: SimpleMessage confirmando el logout
router.post('/logout', controller.logout);

// POST /api/auth/refresh - Refrescar access token
// Body: { refresh_token }
// Response: AccessTokenOnly con nuevo access_token
router.post('/refresh', controller.refreshToken);

/**
 * RUTAS DE GESTI√ìN DE PERFIL
 * ==========================
 */

// GET /api/auth/me - Obtener perfil del usuario actual
// Headers: Authorization: Bearer <access_token>
// Response: UserPublic con datos del usuario
router.get('/me', controller.getMe);

// PATCH /api/auth/me - Actualizar perfil del usuario
// Headers: Authorization: Bearer <access_token>
// Body: { nombre?, apellido?, telefono?, avatar_url? }
// Response: UserPublic con datos actualizados
router.patch('/me', controller.updateMe);

// PATCH /api/auth/me/password - Cambiar contrase√±a
// Headers: Authorization: Bearer <access_token>
// Body: { current_password, new_password }
// Response: SimpleMessage confirmando el cambio
router.patch('/me/password', controller.changePassword);

// POST /api/auth/me/push-token - Registrar token FCM
// Headers: Authorization: Bearer <access_token>
// Body: { token, platform?: 'android' | 'ios' | 'web' }
// Response: SimpleMessage confirmando el registro
router.post('/me/push-token', controller.registerPushToken);

/**
 * RUTAS DE VERIFICACI√ìN DE EMAIL
 * ==============================
 */

// POST /api/auth/verify-email - Verificar email con token
// Body: { token }
// Response: SimpleMessage confirmando la verificaci√≥n
router.post('/verify-email', controller.verifyEmail);

// POST /api/auth/resend-verification - Reenviar email de verificaci√≥n
// Body: { email }
// Response: SimpleMessage confirmando el env√≠o
router.post('/resend-verification', controller.resendVerification);

/**
 * RUTAS DE RECUPERACI√ìN DE CONTRASE√ëA
 * ===================================
 */

// POST /api/auth/forgot-password - Solicitar reset de contrase√±a
// Body: { email }
// Response: SimpleMessage confirmando el env√≠o del email
router.post('/forgot-password', controller.forgotPassword);

// POST /api/auth/reset-password - Restablecer contrase√±a con token
// Body: { token, new_password }
// Response: TokenResponse con nueva autenticaci√≥n
router.post('/reset-password', controller.resetPassword);

/**
 * RUTAS DE UTILIDAD Y DEBUG
 * =========================
 */

// GET /api/auth/status - Estado del servicio de autenticaci√≥n
// Response: Estado del servicio y lista de endpoints disponibles
router.get('/status', controller.getStatus);

export default router;
